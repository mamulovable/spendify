Perfect! Hereâ€™s how to **securely connect to Gemini**, parse the image, and ensure **clean JSON parsing** from the response inside your `ocrService.ts`. This includes:

- Sending the image OCR result to Gemini with a structured prompt.
- Parsing a clean JSON response.
- Handling bad/malformed responses safely.

---

### âœ… **Step-by-step Gemini Integration**

---

### ðŸ”¹ **Step 1: OCR to Text (Already Done)**  
You already extract text from the image. Let's assume that result is in a variable:  

```ts
const extractedText = "03/01/2025 Starbucks $25.00\n03/02/2025 Netflix $12.99";
```

---

### ðŸ”¹ **Step 2: Send Prompt to Gemini API**

Hereâ€™s a function that sends this OCRâ€™d text to Gemini:

```ts
export async function sendToGemini(extractedText: string): Promise<any> {
  const prompt = `
You are a financial assistant AI. Extract structured JSON from the following bank statement text.

The text:
"""${extractedText}"""

Output format:
[
  {
    "date": "YYYY-MM-DD",
    "description": "string",
    "amount": number,
    "type": "credit" or "debit"
  }
]
`;

  const response = await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${process.env.NEXT_PUBLIC_GEMINI_API_KEY}` // Or secure it in backend
    },
    body: JSON.stringify({
      contents: [{ parts: [{ text: prompt }] }]
    })
  });

  const result = await response.json();
  const rawText = result.candidates?.[0]?.content?.parts?.[0]?.text || "";

  return parseGeminiResponse(rawText);
}
```

---

### ðŸ”¹ **Step 3: Parse Gemini JSON Response Safely**

```ts
function parseGeminiResponse(responseText: string): any {
  try {
    const jsonMatch = responseText.match(/\[.*\]/s); // Capture the array part of JSON
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    } else {
      console.error("No valid JSON array found in Gemini response:", responseText);
      throw new Error("No valid JSON found");
    }
  } catch (err) {
    console.error("Failed to parse Gemini response:", err);
    throw new Error("Failed to parse extracted data");
  }
}
```

---

### ðŸ”¹ **Step 4: Hook it into Image Upload Logic**

```ts
async function processImageAndExtractTransactions(imageText: string) {
  try {
    const extractedTransactions = await sendToGemini(imageText);
    console.log("Extracted transactions:", extractedTransactions);
    // Save to database or display
  } catch (err) {
    console.error("Error processing image with Gemini:", err);
  }
}
```

---
