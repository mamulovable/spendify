        <TabsContent value="retention">
          <Card>
            <CardHeader>
              <CardTitle>User Retention</CardTitle>
              <CardDescription>Weekly cohort retention analysis</CardDescription>
            </CardHeader>
            <CardContent>
              {loading ? (
                <Skeleton className="h-[400px] w-full" />
              ) : retention.length === 0 ? (
                <div className="flex h-[400px] items-center justify-center">
                  <p className="text-muted-foreground">No retention data available</p>
                </div>
              ) : (
                <div className="space-y-8">
                  <div className="border rounded-md">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Cohort Date</TableHead>
                          <TableHead>Users</TableHead>
                          <TableHead>Week 1</TableHead>
                          <TableHead>Week 2</TableHead>
                          <TableHead>Week 3</TableHead>
                          <TableHead>Week 4</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {retention.map((cohort) => (
                          <TableRow key={cohort.cohort_date}>
                            <TableCell>{format(new Date(cohort.cohort_date), 'MMM dd, yyyy')}</TableCell>
                            <TableCell>{cohort.total_users}</TableCell>
                            <TableCell className={cohort.week_1 >= 40 ? 'text-green-500' : cohort.week_1 >= 20 ? 'text-amber-500' : 'text-red-500'}>
                              {cohort.week_1}%
                            </TableCell>
                            <TableCell className={cohort.week_2 >= 30 ? 'text-green-500' : cohort.week_2 >= 15 ? 'text-amber-500' : 'text-red-500'}>
                              {cohort.week_2}%
                            </TableCell>
                            <TableCell className={cohort.week_3 >= 25 ? 'text-green-500' : cohort.week_3 >= 10 ? 'text-amber-500' : 'text-red-500'}>
                              {cohort.week_3}%
                            </TableCell>
                            <TableCell className={cohort.week_4 >= 20 ? 'text-green-500' : cohort.week_4 >= 8 ? 'text-amber-500' : 'text-red-500'}>
                              {cohort.week_4}%
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>

                  <div>
                    <h3 className="text-lg font-medium mb-4">Retention Heat Map</h3>
                    <div className="grid grid-cols-5 gap-2">
                      <div className="font-medium">Cohort</div>
                      <div className="font-medium text-center">Week 1</div>
                      <div className="font-medium text-center">Week 2</div>
                      <div className="font-medium text-center">Week 3</div>
                      <div className="font-medium text-center">Week 4</div>
                      
                      {retention.map((cohort) => (
                        <React.Fragment key={cohort.cohort_date}>
                          <div className="text-sm">{format(new Date(cohort.cohort_date), 'MMM dd')}</div>
                          <div 
                            className="p-2 text-center rounded-md text-sm" 
                            style={{ 
                              backgroundColor: `rgba(var(--primary-rgb), ${cohort.week_1 / 100})`,
                              color: cohort.week_1 > 50 ? 'white' : 'inherit'
                            }}
                          >
                            {cohort.week_1}%
                          </div>
                          <div 
                            className="p-2 text-center rounded-md text-sm" 
                            style={{ 
                              backgroundColor: `rgba(var(--primary-rgb), ${cohort.week_2 / 100})`,
                              color: cohort.week_2 > 50 ? 'white' : 'inherit'
                            }}
                          >
                            {cohort.week_2}%
                          </div>
                          <div 
                            className="p-2 text-center rounded-md text-sm" 
                            style={{ 
                              backgroundColor: `rgba(var(--primary-rgb), ${cohort.week_3 / 100})`,
                              color: cohort.week_3 > 50 ? 'white' : 'inherit'
                            }}
                          >
                            {cohort.week_3}%
                          </div>
                          <div 
                            className="p-2 text-center rounded-md text-sm" 
                            style={{ 
                              backgroundColor: `rgba(var(--primary-rgb), ${cohort.week_4 / 100})`,
                              color: cohort.week_4 > 50 ? 'white' : 'inherit'
                            }}
                          >
                            {cohort.week_4}%
                          </div>
                        </React.Fragment>
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="financial">
          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>Revenue Overview</CardTitle>
                <CardDescription>Monthly revenue breakdown</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : revenue.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No revenue data available</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <RechartsBarChart data={revenue}>
                      <XAxis 
                        dataKey="month" 
                        tickFormatter={(date) => format(new Date(date), 'MMM yy')}
                      />
                      <YAxis tickFormatter={(value) => formatCurrency(value)} />
                      <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                      <RechartsTooltip
                        formatter={(value: number) => [formatCurrency(value), 'Revenue']}
                        labelFormatter={(date) => format(new Date(date), 'MMMM yyyy')}
                      />
                      <Bar dataKey="monthly_revenue" fill="hsl(var(--primary))" name="Revenue" />
                    </RechartsBarChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Trial Conversion</CardTitle>
                <CardDescription>Weekly trial to paid conversion rates</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : trialConversion.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No conversion data available</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <LineChart data={trialConversion}>
                      <XAxis 
                        dataKey="week" 
                        tickFormatter={(date) => format(new Date(date), 'MMM dd')}
                      />
                      <YAxis tickFormatter={(value) => `${value}%`} />
                      <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                      <RechartsTooltip
                        formatter={(value: number, name: string) => [
                          name === 'conversion_rate' ? `${value}%` : value,
                          name === 'conversion_rate' ? 'Conversion Rate' : 
                          name === 'trial_users' ? 'Trial Users' : 'Converted Users'
                        ]}
                        labelFormatter={(date) => format(new Date(date), 'MMMM dd, yyyy')}
                      />
                      <Line 
                        type="monotone" 
                        dataKey="conversion_rate" 
                        stroke="hsl(var(--primary))"
                        strokeWidth={2}
                        dot={{ r: 4 }}
                        activeDot={{ r: 6 }}
                        name="Conversion Rate"
                      />
                    </LineChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>

            <Card className="md:col-span-2">
              <CardHeader>
                <CardTitle>Conversion Funnel</CardTitle>
                <CardDescription>Trial to paid conversion funnel</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : trialConversion.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No conversion data available</p>
                  </div>
                ) : (
                  <div className="space-y-8">
                    <div className="flex justify-center">
                      <div className="w-full max-w-md">
                        {(() => {
                          const totalTrialUsers = trialConversion.reduce((sum, item) => sum + item.trial_users, 0);
                          const totalConversions = trialConversion.reduce((sum, item) => sum + item.converted_users, 0);
                          const avgConversionRate = Math.round(trialConversion.reduce((sum, item) => sum + item.conversion_rate, 0) / trialConversion.length);
                          
                          return (
                            <div className="space-y-4">
                              <div className="bg-muted p-4 rounded-t-lg text-center">
                                <div className="text-2xl font-bold">{totalTrialUsers}</div>
                                <div className="text-muted-foreground">Free Trial Users</div>
                              </div>
                              <div className="h-8 flex justify-center items-center">
                                <div className="h-full w-1 bg-muted"></div>
                              </div>
                              <div className="bg-muted p-4 rounded-lg text-center">
                                <div className="text-2xl font-bold">{totalConversions}</div>
                                <div className="text-muted-foreground">Converted to Paid</div>
                                <Badge variant="outline" className="mt-2">{avgConversionRate}% Conversion Rate</Badge>
                              </div>
                            </div>
                          );
                        })()}
                      </div>
                    </div>

                    <div className="border rounded-md">
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>Week</TableHead>
                            <TableHead>Trial Users</TableHead>
                            <TableHead>Conversions</TableHead>
                            <TableHead>Rate</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {trialConversion.map((item) => (
                            <TableRow key={item.week}>
                              <TableCell>{format(new Date(item.week), 'MMM dd, yyyy')}</TableCell>
                              <TableCell>{item.trial_users}</TableCell>
                              <TableCell>{item.converted_users}</TableCell>
                              <TableCell>
                                <Badge variant={item.conversion_rate >= 20 ? 'default' : 'secondary'}>
                                  {item.conversion_rate}%
                                </Badge>
                              </TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="performance">
          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>Document Processing Metrics</CardTitle>
                <CardDescription>Processing time and volume</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : documentProcessing.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No document processing data available</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <LineChart 
                      data={documentProcessing}
                      margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                      <XAxis 
                        dataKey="date" 
                        tickFormatter={(date) => format(new Date(date), 'MMM dd')}
                      />
                      <YAxis yAxisId="left" />
                      <YAxis yAxisId="right" orientation="right" />
                      <RechartsTooltip
                        formatter={(value: number, name: string) => [
                          name === 'documents_processed' ? value : `${value}s`,
                          name === 'documents_processed' ? 'Documents' : 'Avg. Processing Time'
                        ]}
                        labelFormatter={(date) => format(new Date(date), 'MMMM dd, yyyy')}
                      />
                      <Legend />
                      <Line 
                        yAxisId="left"
                        type="monotone" 
                        dataKey="documents_processed" 
                        stroke="hsl(var(--primary))" 
                        name="Documents Processed"
                      />
                      <Line 
                        yAxisId="right"
                        type="monotone" 
                        dataKey="avg_processing_time_seconds" 
                        stroke="hsl(var(--secondary))" 
                        name="Avg. Processing Time (s)"
                      />
                    </LineChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>API Performance</CardTitle>
                <CardDescription>Response times and success rates</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex h-[300px] items-center justify-center">
                  <p className="text-muted-foreground">API performance monitoring coming soon</p>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
