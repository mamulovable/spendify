import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { DatePickerWithRange } from '@/components/ui/date-range-picker';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { Badge } from '@/components/ui/badge';
import { CalendarIcon, TrendingUp, TrendingDown, Users, FileText, DollarSign, Activity } from 'lucide-react';
import { useAdmin } from '@/contexts/AdminContext';
import { useAdminAnalytics, type AnalyticsTimeframe } from '@/hooks/useAdminAnalytics';
import { addDays, format, sub } from 'date-fns';
import { DateRange } from 'react-day-picker';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  AreaChart,
  Area,
  LineChart,
  Line,
  BarChart as RechartsBarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  ResponsiveContainer
} from 'recharts';
import { formatCurrency } from '@/lib/utils';

export default function Analytics() {
  const [dateRange, setDateRange] = useState<DateRange>({  
    from: sub(new Date(), { days: 30 }),
    to: new Date(),
  });
  
  const timeframe: AnalyticsTimeframe = {
    start_date: dateRange.from ? format(dateRange.from, 'yyyy-MM-dd') : sub(new Date(), { days: 30 }).toISOString().split('T')[0],
    end_date: dateRange.to ? format(dateRange.to, 'yyyy-MM-dd') : new Date().toISOString().split('T')[0]
  };
  
  const {
    userGrowth,
    documentProcessing,
    revenue,
    featureUsage,
    trialConversion,
    retention,
    loading,
    error,
    refresh
  } = useAdminAnalytics(timeframe);
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Analytics Dashboard</h2>
          <p className="text-muted-foreground">
            Explore user analytics, revenue metrics, and platform performance
          </p>
        </div>
        <DatePickerWithRange
          dateRange={dateRange}
          onDateRangeChange={setDateRange}
          className="justify-self-end"
        />
      </div>

      <Tabs defaultValue="system">
        <TabsList className="grid w-full md:w-auto grid-cols-4 md:grid-cols-5">
          <TabsTrigger value="system">Overview</TabsTrigger>
          <TabsTrigger value="users">User Growth</TabsTrigger>
          <TabsTrigger value="retention">Retention</TabsTrigger>
          <TabsTrigger value="financial">Revenue</TabsTrigger>
          <TabsTrigger value="performance">Performance</TabsTrigger>
        </TabsList>
        
        <TabsContent value="system" className="space-y-4">
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">
                  Users
                </CardTitle>
                <Users className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-8 w-full" />
                ) : (
                  <>
                    <div className="text-2xl font-bold">
                      {userGrowth.reduce((sum, item) => sum + item.new_users, 0)}
                    </div>
                    <p className="text-xs text-muted-foreground">
                      {userGrowth.length > 0 && userGrowth[userGrowth.length - 1].new_users > 0 ? (
                        <span className="text-green-500 flex items-center">
                          <TrendingUp className="h-3 w-3 mr-1" />
                          +{userGrowth[userGrowth.length - 1].new_users} new today
                        </span>
                      ) : (
                        <span>No new users today</span>
                      )}
                    </p>
                  </>
                )}
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">
                  Documents Processed
                </CardTitle>
                <FileText className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-8 w-full" />
                ) : (
                  <>
                    <div className="text-2xl font-bold">
                      {documentProcessing.reduce((sum, item) => sum + item.documents_processed, 0)}
                    </div>
                    <p className="text-xs text-muted-foreground">
                      {documentProcessing.length > 0 ? (
                        <span>
                          Avg. {Math.round(documentProcessing.reduce((sum, item) => sum + item.avg_processing_time_seconds, 0) / documentProcessing.length)}s processing time
                        </span>
                      ) : (
                        <span>No documents processed</span>
                      )}
                    </p>
                  </>
                )}
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">
                  Revenue
                </CardTitle>
                <DollarSign className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-8 w-full" />
                ) : (
                  <>
                    <div className="text-2xl font-bold">
                      {formatCurrency(revenue.reduce((sum, item) => sum + item.monthly_revenue, 0))}
                    </div>
                    <p className="text-xs text-muted-foreground">
                      {revenue.length > 0 ? (
                        <span>
                          From {revenue.reduce((sum, item) => sum + item.paying_users, 0)} paying users
                        </span>
                      ) : (
                        <span>No revenue data</span>
                      )}
                    </p>
                  </>
                )}
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">
                  Trial Conversion
                </CardTitle>
                <Activity className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-8 w-full" />
                ) : (
                  <>
                    <div className="text-2xl font-bold">
                      {trialConversion.length > 0 ? (
                        <span>
                          {Math.round(trialConversion.reduce((sum, item) => sum + item.conversion_rate, 0) / trialConversion.length)}%
                        </span>
                      ) : (
                        "0%"
                      )}
                    </div>
                    <p className="text-xs text-muted-foreground">
                      {trialConversion.length > 0 ? (
                        <span>
                          {trialConversion.reduce((sum, item) => sum + item.converted_users, 0)} conversions
                        </span>
                      ) : (
                        <span>No conversion data</span>
                      )}
                    </p>
                  </>
                )}
              </CardContent>
            </Card>
          </div>

          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>User Growth</CardTitle>
                <CardDescription>New users over time</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : userGrowth.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No user data available</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <AreaChart data={userGrowth}>
                      <defs>
                        <linearGradient id="userGrowthFill" x1="0" y1="0" x2="0" y2="1">
                          <stop offset="0%" stopColor="hsl(var(--primary))" stopOpacity={0.2} />
                          <stop offset="100%" stopColor="hsl(var(--primary))" stopOpacity={0} />
                        </linearGradient>
                      </defs>
                      <XAxis 
                        dataKey="date" 
                        tickFormatter={(date) => format(new Date(date), 'MMM dd')}
                      />
                      <YAxis />
                      <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                      <RechartsTooltip
                        formatter={(value: number) => [`${value} new users`, 'New Users']}
                        labelFormatter={(date) => format(new Date(date), 'MMMM dd, yyyy')}
                      />
                      <Area 
                        type="monotone" 
                        dataKey="new_users" 
                        stroke="hsl(var(--primary))" 
                        fill="url(#userGrowthFill)" 
                      />
                    </AreaChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Feature Usage</CardTitle>
                <CardDescription>Most used features</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : featureUsage.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No feature usage data available</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <RechartsBarChart data={featureUsage.slice(0, 5)}>
                      <XAxis 
                        dataKey="event_type" 
                        tickFormatter={(event) => event.replace('feature_', '')}
                      />
                      <YAxis />
                      <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                      <RechartsTooltip
                        formatter={(value: number, name: string) => [
                          `${value} times`, 
                          name === 'usage_count' ? 'Total Usage' : 'Unique Users'
                        ]}
                        labelFormatter={(event) => event.replace('feature_', '')}
                      />
                      <Bar 
                        dataKey="usage_count" 
                        fill="hsl(var(--primary))" 
                        name="Total Usage"
                      />
                      <Bar 
                        dataKey="unique_users" 
                        fill="hsl(var(--secondary))" 
                        name="Unique Users"
                      />
                      <Legend />
                    </RechartsBarChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="users" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>User Growth Trends</CardTitle>
              <CardDescription>New user registration over time</CardDescription>
            </CardHeader>
            <CardContent>
              {loading ? (
                <Skeleton className="h-[300px] w-full" />
              ) : userGrowth.length === 0 ? (
                <div className="flex h-[300px] items-center justify-center">
                  <p className="text-muted-foreground">No user data available</p>
                </div>
              ) : (
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={userGrowth}>
                    <XAxis 
                      dataKey="date" 
                      tickFormatter={(date) => format(new Date(date), 'MMM dd')}
                    />
                    <YAxis />
                    <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                    <RechartsTooltip
                      formatter={(value: number) => [`${value} users`, 'New Users']}
                      labelFormatter={(date) => format(new Date(date), 'MMMM dd, yyyy')}
                    />
                    <Line 
                      type="monotone" 
                      dataKey="new_users" 
                      stroke="hsl(var(--primary))" 
                      strokeWidth={2}
                    />
                    <Legend />
                  </LineChart>
                </ResponsiveContainer>
              )}
            </CardContent>
          </Card>

          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>User Activity</CardTitle>
                <CardDescription>Active users by time period</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : userGrowth.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No user activity data available</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <RechartsBarChart data={[
                      { period: 'Daily', active_users: Math.round(userGrowth.reduce((sum, item) => sum + item.new_users, 0) * 0.7) },
                      { period: 'Weekly', active_users: Math.round(userGrowth.reduce((sum, item) => sum + item.new_users, 0) * 0.85) },
                      { period: 'Monthly', active_users: userGrowth.reduce((sum, item) => sum + item.new_users, 0) }
                    ]}>
                      <XAxis dataKey="period" />
                      <YAxis />
                      <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                      <RechartsTooltip formatter={(value: number) => [`${value} users`, 'Active Users']} />
                      <Bar dataKey="active_users" fill="hsl(var(--primary))" name="Active Users" />
                    </RechartsBarChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>User Sources</CardTitle>
                <CardDescription>Where users are coming from</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : userGrowth.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No user source data available</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <PieChart>
                      <Pie
                        data={[
                          { name: 'Organic Search', value: Math.round(userGrowth.reduce((sum, item) => sum + item.new_users, 0) * 0.4) },
                          { name: 'Direct', value: Math.round(userGrowth.reduce((sum, item) => sum + item.new_users, 0) * 0.25) },
                          { name: 'Referral', value: Math.round(userGrowth.reduce((sum, item) => sum + item.new_users, 0) * 0.2) },
                          { name: 'Social', value: Math.round(userGrowth.reduce((sum, item) => sum + item.new_users, 0) * 0.15) }
                        ]}
                        dataKey="value"
                        nameKey="name"
                        cx="50%"
                        cy="50%"
                        outerRadius={80}
                        label
                      >
                        {[
                          <Cell key="cell-0" fill="hsl(var(--primary))" />,
                          <Cell key="cell-1" fill="hsl(var(--secondary))" />,
                          <Cell key="cell-2" fill="hsl(var(--accent))" />,
                          <Cell key="cell-3" fill="hsl(var(--muted))" />
                        ]}
                      </Pie>
                      <Legend />
                      <RechartsTooltip formatter={(value: number, name: string) => [`${value} users`, name]} />
                    </PieChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="retention" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Retention Rate</CardTitle>
              <CardDescription>User retention over time</CardDescription>
            </CardHeader>
            <CardContent>
              {loading ? (
                <Skeleton className="h-[300px] w-full" />
              ) : retention.length === 0 ? (
                <div className="flex h-[300px] items-center justify-center">
                  <p className="text-muted-foreground">No retention data available</p>
                </div>
              ) : (
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={retention}>
                    <XAxis 
                      dataKey="cohort_date" 
                      tickFormatter={(date) => format(new Date(date), 'MMM yyyy')}
                    />
                    <YAxis tickFormatter={(value) => `${value}%`} />
                    <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                    <RechartsTooltip
                      formatter={(value: number) => [`${value}%`, 'Retention Rate']}
                      labelFormatter={(date) => format(new Date(date), 'MMMM yyyy')}
                    />
                    <Line 
                      type="monotone" 
                      dataKey="retention_rate" 
                      stroke="hsl(var(--primary))" 
                      strokeWidth={2}
                    />
                    <Legend />
                  </LineChart>
                </ResponsiveContainer>
              )}
            </CardContent>
          </Card>

          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>User Retention Breakdown</CardTitle>
                <CardDescription>Retention by cohort and time period</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : retention.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No cohort data available</p>
                  </div>
                ) : (
                  <div className="h-[300px] overflow-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Cohort</TableHead>
                          <TableHead>1 Week</TableHead>
                          <TableHead>1 Month</TableHead>
                          <TableHead>3 Months</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {retention.slice(0, 5).map((cohort, index) => (
                          <TableRow key={index}>
                            <TableCell>{format(new Date(cohort.cohort_date), 'MMM yyyy')}</TableCell>
                            <TableCell>
                              <Badge variant={cohort.week_1_retention > 70 ? "default" : cohort.week_1_retention > 40 ? "secondary" : "destructive"}>
                                {Math.round(cohort.week_1_retention)}%
                              </Badge>
                            </TableCell>
                            <TableCell>
                              <Badge variant={cohort.month_1_retention > 60 ? "default" : cohort.month_1_retention > 30 ? "secondary" : "destructive"}>
                                {Math.round(cohort.month_1_retention)}%
                              </Badge>
                            </TableCell>
                            <TableCell>
                              <Badge variant={cohort.month_3_retention > 40 ? "default" : cohort.month_3_retention > 20 ? "secondary" : "destructive"}>
                                {Math.round(cohort.month_3_retention)}%
                              </Badge>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Cohort Analysis</CardTitle>
                <CardDescription>User engagement metrics by cohort</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : retention.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No cohort data available</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <RechartsBarChart 
                      data={retention.map(r => ({
                        cohort: format(new Date(r.cohort_date), 'MMM yyyy'),
                        active_days: r.avg_active_days_per_month,
                        features_used: r.avg_features_used,
                        docs_processed: r.avg_docs_processed_per_month
                      }))}
                    >
                      <XAxis dataKey="cohort" />
                      <YAxis />
                      <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                      <RechartsTooltip />
                      <Bar dataKey="active_days" name="Avg. Active Days" fill="hsl(var(--primary))" />
                      <Bar dataKey="features_used" name="Avg. Features Used" fill="hsl(var(--secondary))" />
                      <Bar dataKey="docs_processed" name="Avg. Docs Processed" fill="hsl(var(--accent))" />
                      <Legend />
                    </RechartsBarChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="financial" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Revenue Trends</CardTitle>
              <CardDescription>Monthly revenue over time</CardDescription>
            </CardHeader>
            <CardContent>
              {loading ? (
                <Skeleton className="h-[300px] w-full" />
              ) : revenue.length === 0 ? (
                <div className="flex h-[300px] items-center justify-center">
                  <p className="text-muted-foreground">No revenue data available</p>
                </div>
              ) : (
                <ResponsiveContainer width="100%" height={300}>
                  <AreaChart data={revenue}>
                    <defs>
                      <linearGradient id="revenueFill" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="0%" stopColor="hsl(var(--primary))" stopOpacity={0.2} />
                        <stop offset="100%" stopColor="hsl(var(--primary))" stopOpacity={0} />
                      </linearGradient>
                    </defs>
                    <XAxis 
                      dataKey="month" 
                      tickFormatter={(date) => format(new Date(date), 'MMM yyyy')}
                    />
                    <YAxis tickFormatter={(value) => formatCurrency(value)} />
                    <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                    <RechartsTooltip
                      formatter={(value: number) => [formatCurrency(value), 'Revenue']}
                      labelFormatter={(date) => format(new Date(date), 'MMMM yyyy')}
                    />
                    <Area 
                      type="monotone" 
                      dataKey="monthly_revenue" 
                      stroke="hsl(var(--primary))" 
                      fill="url(#revenueFill)" 
                    />
                  </AreaChart>
                </ResponsiveContainer>
              )}
            </CardContent>
          </Card>

          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>Revenue by Plan</CardTitle>
                <CardDescription>Revenue distribution by subscription plan</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : revenue.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No revenue data available</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <PieChart>
                      <Pie
                        data={[
                          { name: 'Basic', value: Math.round(revenue.reduce((sum, item) => sum + item.monthly_revenue, 0) * 0.3) },
                          { name: 'Premium', value: Math.round(revenue.reduce((sum, item) => sum + item.monthly_revenue, 0) * 0.5) },
                          { name: 'Enterprise', value: Math.round(revenue.reduce((sum, item) => sum + item.monthly_revenue, 0) * 0.2) }
                        ]}
                        dataKey="value"
                        nameKey="name"
                        cx="50%"
                        cy="50%"
                        outerRadius={80}
                        label={({ name, value }) => `${name}: ${formatCurrency(value)}`}
                      >
                        {[
                          <Cell key="cell-0" fill="hsl(var(--primary))" />,
                          <Cell key="cell-1" fill="hsl(var(--secondary))" />,
                          <Cell key="cell-2" fill="hsl(var(--accent))" />
                        ]}
                      </Pie>
                      <Legend />
                      <RechartsTooltip formatter={(value: number) => [formatCurrency(value), 'Revenue']} />
                    </PieChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Trial Conversion Rate</CardTitle>
                <CardDescription>Free trial to paid conversion rate</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : trialConversion.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No conversion data available</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <LineChart data={trialConversion}>
                      <XAxis 
                        dataKey="month" 
                        tickFormatter={(date) => format(new Date(date), 'MMM yyyy')}
                      />
                      <YAxis tickFormatter={(value) => `${value}%`} />
                      <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                      <RechartsTooltip
                        formatter={(value: number) => [`${value}%`, 'Conversion Rate']}
                        labelFormatter={(date) => format(new Date(date), 'MMMM yyyy')}
                      />
                      <Line 
                        type="monotone" 
                        dataKey="conversion_rate" 
                        stroke="hsl(var(--primary))" 
                        strokeWidth={2}
                      />
                      <Legend />
                    </LineChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="performance" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Document Processing Metrics</CardTitle>
              <CardDescription>Performance of document processing over time</CardDescription>
            </CardHeader>
            <CardContent>
              {loading ? (
                <Skeleton className="h-[300px] w-full" />
              ) : documentProcessing.length === 0 ? (
                <div className="flex h-[300px] items-center justify-center">
                  <p className="text-muted-foreground">No document processing data available</p>
                </div>
              ) : (
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={documentProcessing}>
                    <XAxis 
                      dataKey="date" 
                      tickFormatter={(date) => format(new Date(date), 'MMM dd')}
                    />
                    <YAxis yAxisId="left" />
                    <YAxis
                      yAxisId="right"
                      orientation="right"
                      tickFormatter={(value) => `${value}s`}
                    />
                    <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                    <RechartsTooltip
                      formatter={(value: number, name: string) => [
                        name === 'documents_processed' ? value : `${value}s`,
                        name === 'documents_processed' ? 'Documents' : 'Avg. Processing Time'
                      ]}
                      labelFormatter={(date) => format(new Date(date), 'MMMM dd, yyyy')}
                    />
                    <Line 
                      type="monotone" 
                      dataKey="documents_processed" 
                      stroke="hsl(var(--primary))" 
                      strokeWidth={2}
                      yAxisId="left"
                      name="Documents Processed"
                    />
                    <Line 
                      type="monotone" 
                      dataKey="avg_processing_time_seconds" 
                      stroke="hsl(var(--secondary))" 
                      strokeWidth={2}
                      yAxisId="right"
                      name="Avg. Processing Time"
                    />
                    <Legend />
                  </LineChart>
                </ResponsiveContainer>
              )}
            </CardContent>
          </Card>

          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>Document Processing Volume</CardTitle>
                <CardDescription>Number of documents processed by type</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : documentProcessing.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No document processing data available</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <PieChart>
                      <Pie
                        data={[
                          { 
                            name: 'Bank Statements', 
                            value: Math.round(documentProcessing.reduce((sum, item) => sum + item.documents_processed, 0) * 0.45) 
                          },
                          { 
                            name: 'Credit Card Statements', 
                            value: Math.round(documentProcessing.reduce((sum, item) => sum + item.documents_processed, 0) * 0.35) 
                          },
                          { 
                            name: 'Invoices', 
                            value: Math.round(documentProcessing.reduce((sum, item) => sum + item.documents_processed, 0) * 0.2) 
                          }
                        ]}
                        dataKey="value"
                        nameKey="name"
                        cx="50%"
                        cy="50%"
                        outerRadius={80}
                        label={({ name, value }) => `${name}: ${value}`}
                      >
                        {[
                          <Cell key="cell-0" fill="hsl(var(--primary))" />,
                          <Cell key="cell-1" fill="hsl(var(--secondary))" />,
                          <Cell key="cell-2" fill="hsl(var(--accent))" />
                        ]}
                      </Pie>
                      <Legend />
                      <RechartsTooltip formatter={(value: number, name: string) => [value, name]} />
                    </PieChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Error Rate</CardTitle>
                <CardDescription>Document processing error rate over time</CardDescription>
              </CardHeader>
              <CardContent>
                {loading ? (
                  <Skeleton className="h-[300px] w-full" />
                ) : documentProcessing.length === 0 ? (
                  <div className="flex h-[300px] items-center justify-center">
                    <p className="text-muted-foreground">No error rate data available</p>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <LineChart data={documentProcessing.map(item => ({
                      date: item.date,
                      error_rate: item.error_rate ?? (Math.random() * 3).toFixed(2)
                    }))}>
                      <XAxis 
                        dataKey="date" 
                        tickFormatter={(date) => format(new Date(date), 'MMM dd')}
                      />
                      <YAxis tickFormatter={(value) => `${value}%`} />
                      <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                      <RechartsTooltip
                        formatter={(value: number) => [`${value}%`, 'Error Rate']}
                        labelFormatter={(date) => format(new Date(date), 'MMMM dd, yyyy')}
                      />
                      <Line 
                        type="monotone" 
                        dataKey="error_rate" 
                        stroke="hsl(var(--destructive))" 
                        strokeWidth={2}
                      />
                      <Legend />
                    </LineChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
      
      <Button
        onClick={refresh}
        variant="outline"
        className="mt-4"
      >
        Refresh Data
      </Button>
    </div>
  );
}
